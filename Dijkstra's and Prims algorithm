#include<iostream>
#include<vector>
#include<list>
#include<utility>
#include<climits>
#include<queue>
#include<algorithm>

using namespace std;

int main(){
   class Graph{
 list<pair<int,int>> *adj;
   public:
      int vertex;
    
    Graph(int v){
      vertex=v;
      adj = new list<pair<int,int>>[vertex];
    }

    void Edge(int u,int d,int w,bool dir){
      adj[u].push_back({d,w});
      if(dir){
        adj[d].push_back({u,w});
      }
    }

    void Graph(){
      for(int i=0;i<vertex;i++){ cout << i << " : ";
        for(auto it=adj[i].begin();it!=adj[i].end();it++){
          cout << "{" << it->first << "," << it->second << "}"; 
        }
        cout << endl;
      }
    }

    void Dijisktra(int source_vertex){
      vector<int> distance_vect(vertex,INT_MAX);
      distance_vect[source_vertex]=0;
      priority_queue<pair<int,int>,vector<pair<int,int>>, greater<pair<int,int>>> pq={};
      pq.push(make_pair(0,source_vertex));
      while(!pq.empty()){
        pair<int,int> temp=pq.top();
        int node = temp.second;
        int dist = temp.first;
        for(auto it : adj[node]){
          int dist1 = it.second;
          int vtx1 = it.first;
          if(distance_vect[node]+dist1 < distance_vect[vtx1]){
            distance_vect[vtx1] = distance_vect[node]+dist1;
            pq.push(make_pair(distance_vect[vtx1],vtx1));
          }
        }
        pq.pop();
      }
      for(auto &var: distance_vect){
        cout << var << " ";
      }
      cout << endl;
    }

    void Prims(int source_vertex){
      vector<int>key_vect(vertex,INT_MAX);
      key_vect[source_vertex]=0;
      vector<bool>MST(vertex,false);
      MST[source_vertex]=true;
      vector<int>parent_vect(vertex,-1);

      priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq={};
      pq.push({0,0});

      for(int i=0;i<vertex-1;i++){
        int u=pq.top().second;
        pq.pop();
        MST[u]=true;
        for(auto it : adj[u]){
          int node = it.first;
          int weight = it.second;
          if(MST[node]==false && weight < key_vect[node]){
            key_vect[node]=weight;
            pq.push({weight,node});
            parent_vect[node]=u;
          }
        }
      }
      for(auto &var: parent_vect){
        cout << var << " ";
      }
    }
  };
  
  Graph g(6);
  g.Edge(0,1,10,false);
  g.Edge(0,5,8,false);
  g.Edge(5,4,1,false);
  g.Edge(4,1,4,false);
  g.Edge(4,3,-1,false);
  g.Edge(1,3,2,false);
  g.Edge(3,2,-2,false);
  g.Edge(2,1,1,false);
  g.Graph();
  g.Prims(0);
  g.Dijisktra(0)
}

/*why prims and dijkstras would throw an error?
1) its because while using prims we first pick the shortest distance to a edge from the source,
but assuming that we are using a directed graph, this may backfire .
as of prims it only uses a path where it could reach all among the nodes and hence we 
woud not be able to use this code for all cases of a directed graph
and it will fail in many cases.
2)The problem with Dijkstraâ€™s algorithm is that it is believed that all costs in the given graph are non-negative,
so adding any positive number on a vertex that has already been visited will never change its minimality.

note:-
this can be be easily reolved by bellman-ford algorithm
*/
